// Test RoPE implementation in TensorLogic
//
// Compares RoPE output with expected values from test_rope.rs

main {
    print("=== RoPE Implementation Test (TensorLogic) ===\n")

    // Test configuration (matching test_rope.rs)
    let seq_len = 1.0
    let n_heads = 32.0
    let head_dim = 64.0

    // Create test input: [1, 32, 64] with pattern: head * 0.1 + dim * 0.01
    // Using nested loops to build the tensor
    let model_path = env("HOME") + "/.llm/models/tinyllama-1.1b-chat-q4_0.gguf"
    let model = load_model(model_path)

    print("Creating test input tensor [1, 32, 64]...")

    // We need to create a tensor programmatically
    // Since TensorLogic doesn't have loops, we'll use a simple pattern
    // and rely on the tensor operations

    // Alternative: Load actual Q tensor from model and test RoPE on it
    let W_q_0 = get_tensor(model, "blk.0.attn_q.weight")
    print("Loaded Q weight: ", shape(W_q_0))

    // For a proper test, let's use embedding from "Hello" token
    let tokenizer_path = env("HOME") + "/.llm/tokenizers/tinyllama-tokenizer.json"
    let tokenizer = load_tokenizer(tokenizer_path)
    let tokens = tokenize(tokenizer, "Hello", false)

    let embed_table = get_tensor(model, "token_embd.weight")
    let h = embedding(embed_table, tokens)  // [1, 2048]

    print("Embedding shape: ", shape(h), "\n")

    // Apply Q projection to get Q tensor
    let Q = linear(h, W_q_0)  // [1, 2048]
    print("Q projection shape: ", shape(Q))

    // Reshape to [1, 32, 64] for RoPE
    let Q_heads = reshape(Q, [1.0, 32.0, 64.0])
    print("Q_heads shape: ", shape(Q_heads), "\n")

    // Apply RoPE (position_offset = 0 by default)
    print("Applying RoPE...")
    let Q_rope = rope(Q_heads)
    print("RoPE output shape: ", shape(Q_rope), "\n")

    // Test with position offset = 1
    print("\n=== Testing with position offset = 1 ===")
    // Note: TensorLogic's rope() doesn't currently expose position_offset parameter
    // This would require modifying the API
    print("(Position offset test requires API modification)")

    print("\n‚úÖ RoPE function executed successfully")
    print("\nüìù Observations:")
    print("  - RoPE accepts [seq_len, n_heads, head_dim] tensor")
    print("  - Output has same shape as input")
    print("  - Default position_offset is 0")
    print("\nüîç To verify correctness:")
    print("  - Need to extract and compare numerical values")
    print("  - Consider adding debug output to RoPE Metal shader")
    print("  - Or create a simpler CPU-based RoPE for comparison")
}
